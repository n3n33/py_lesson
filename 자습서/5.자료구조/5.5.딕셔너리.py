# 파이썬에 내장된 또 하나의 쓸모있는 자료 형은 딕셔너리 입니다 (매핑 형 — dict 를 보세요).
#  딕셔너리는 키 로 인덱싱되는데, 모든 불변형을 사용할 수 있습니다;
#  문자열과 숫자들은 항상 키가 될 수 있습니다.
#  튜플이 문자열, 숫자, 튜플들만 포함하면, 키로 사용될 수 있습니다;
#  튜플이 직접적이나 간접적으로 가변 객체를 포함하면, 키로 사용될 수 없습니다.
#  리스트는 키로 사용할 수 없는데, 리스트는 인덱스 대입, 슬라이스 대입, append() 나 extend() 같은 메서드들로 값이 수정될 수 있기 때문입니다.
#
# 딕셔너리를 (한 딕셔너리 안에서) 키가 중복되지 않는다는 제약 조건을 가진 키:
# 값 쌍의 집합으로 생각하는 것이 최선입니다.
# 중괄호 쌍은 빈 딕셔너리를 만듭니다: {}. 중괄호 안에 쉼표로 분리된 키:값 쌍들의 목록을 넣으면,
# 딕셔너리에 초기 키:값 쌍들을 제공합니다; 이것이 딕셔너리가 출력되는 방식이기도 합니다.
#
# 딕셔너리의 주 연산은 값을 키와 함께 저장하고 주어진 키로 값을 추출하는 것입니다.
# del 로 키:값 쌍을 삭제하는 것도 가능합니다.
# 이미 사용하고 있는 키로 저장하면, 그 키로 저장된 예전 값은 잊힙니다.
# 존재하지 않는 키로 값을 추출하는 것은 에러입니다.
#
# 딕셔러리에 list(d) 를 수행하면 딕셔너리에서 사용되고 있는 모든 키의 리스트를 삽입 순서대로 돌려줍니다
# (정렬을 원하면 대신 sorted(d) 를 사용하면 됩니다).
# 하나의 키가 딕셔너리에 있는지 검사하려면, in 키워드들 사용하세요.

tel = {'jack': 4098, 'sape': 4139}
print(tel['jack'])  # 4098
tel['irv'] = 4127
print(tel)  # {'jack': 4098, 'sape': 4139, 'irv': 4127}
print('jack' in tel)  #True
del tel['sape']
print(tel)
